#version 330 core
//物品材质
struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};
uniform Material material;
//灯光属性
struct Light
{
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform Light light;

in vec3 FragPos;
in vec3 Normal;

out vec4 color;
 
uniform vec3 viewPos;//观察者位置，即摄像机

void main()
{
    //计算环境光
    vec3 ambient = material.ambient * light.ambient;
    //计算漫反射
    vec3 norm = normalize(Normal);//法向量
    vec3 lightDir = normalize(light.position - FragPos);//方向向量
    float diff = max(dot(norm, lightDir), 0.0);//光对当前片段的实际的散射影响
    vec3 diffuse =light.diffuse * (diff * material.diffuse);//计算得出散射因子
    //镜面反射
    vec3 viewDir = normalize(viewPos - FragPos);//观察向量
    vec3 reflectDir = reflect(-lightDir, norm);//反射光向量
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * (spec * material.specular);  //计算镜面亮度分量

    //三者结合
    vec3 result = ambient + diffuse + specular;
    color = vec4(result, 1.0f);
}